/*
 * This file implements some boolean methods which have special NA
 * interactions, including np.any and np.all. Could later gain
 * np.logical_or and np.logical_and, as well as np.bitwise_or and
 * np.bitwise_and because they are often used for boolean operations.
 *
 * NOTE: These functions assume that the input boolean data is valid,
 *       i.e. that each boolean is either 0 or 1. Any deviation from this
 *       may produce incorrect answers.
 *
 * Written by Mark Wiebe (mwwiebe@gmail.com)
 * Copyright (c) 2011 by Enthought, Inc.
 *
 * See LICENSE.txt for the license.
 */

#define PY_SSIZE_T_CLEAN
#include <Python.h>

#define NPY_NO_DEPRECATED_API
#define _MULTIARRAYMODULE
#include <numpy/arrayobject.h>

#include "npy_config.h"
#include "numpy/npy_3kcompat.h"

#include "reduction.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Typedef for the reduction inner loop */
typedef void (reduce_inner_loop)(char **, npy_intp *, npy_intp);

#define ANY_COMBINE_MASK(val, mask) ((val) & (mask))
#define ALL_COMBINE_MASK(val, mask) ((val) | ((mask) ^ 0x01))

/**begin repeat
 * #oper = any, all#
 * #Oper = Any, All#
 * #Identity = Zero, One#
 * #combineop = |=, &=#
 * #combinemask = ANY_COMBINE_MASK, ALL_COMBINE_MASK#
 * #shortcircuit = !value, value#
 * #idval = 0, 1#
 */

static int
assign_identity_@oper@(PyArrayObject *result, int preservena, void *data)
{
    return PyArray_Assign@Identity@(result, NULL, preservena, NULL);
}

static void
@oper@_inner_gen_gen(char **dataptr, npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1];
    npy_intp stride0 = strides[0], stride1 = strides[1];
    npy_intp i;

    for (i = 0; i < count; ++i) {
        *data0 @combineop@ *data1;

        data0 += stride0;
        data1 += stride1;
    }
}

static void
@oper@_inner_0stride_gen(char **dataptr, npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1];
    npy_intp stride1 = strides[1];
    npy_intp i;
    char value = *data0;

    for (i = 0; i < count && @shortcircuit@; ++i) {
        value @combineop@ *data1;

        data1 += stride1;
    }

    *(npy_bool *)data0 = value;
}

static void
@oper@_inner_0stride_contig(char **dataptr, npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1];
    char value = *data0;

    if (@shortcircuit@ && memchr(data1, 1-@idval@, count) != NULL) {
        *(npy_bool *)data0 = 1-@idval@;
    }
}

static void
@oper@_inner_contig_contig(char **dataptr, npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1];
    npy_intp i;

    for (i = 0; i < count; ++i) {
        *data0 @combineop@ *data1;

        ++data0;
        ++data1;
    }
}

static int
reduce_@oper@_loop(NpyIter *iter,
                char **dataptr,
                npy_intp *strides,
                npy_intp *countptr,
                NpyIter_IterNextFunc *iternext,
                int needs_api,
                npy_intp skip_first_count,
                void *data)
{
    npy_intp fixed_strides[2];
    reduce_inner_loop *inner_loop;
    NPY_BEGIN_THREADS_DEF;

    NpyIter_GetInnerFixedStrideArray(iter, fixed_strides);

    if (!needs_api) {
        NPY_BEGIN_THREADS;
    }

    /* Choose a loop specialized based on the strides */
    if (fixed_strides[0] == 0) {
        if (fixed_strides[1] == 1) {
            inner_loop = &@oper@_inner_0stride_contig;
        }
        else {
            inner_loop = &@oper@_inner_0stride_gen;
        }
    }
    else {
        if (fixed_strides[0] == 1 && fixed_strides[1] == 1) {
            inner_loop = &@oper@_inner_contig_contig;
        }
        else {
            inner_loop = &@oper@_inner_gen_gen;
        }
    }

    /*
     * 'skip_first_count' will always be 0 because we are doing a reduction
     * with an identity.
     */

    do {
        inner_loop(dataptr, strides, *countptr);
    } while (iternext(iter));

    if (!needs_api) {
        NPY_END_THREADS;
    }

    return (needs_api && PyErr_Occurred()) ? -1 : 0;
}

static void
@oper@_masked_inner_gen_gen_gen(char **dataptr,
                                npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1], *data2 = dataptr[2];
    npy_intp stride0 = strides[0], stride1 = strides[1], stride2 = strides[2];
    npy_intp i;

    for (i = 0; i < count; ++i) {
        *data0 @combineop@ @combinemask@(*data1, *data2);

        data0 += stride0;
        data1 += stride1;
        data2 += stride2;
    }
}

static void
@oper@_masked_inner_0stride_gen_gen(char **dataptr,
                                npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1], *data2 = dataptr[2];
    npy_intp stride1 = strides[1], stride2 = strides[2];
    npy_intp i;
    char value = *data0;

    for (i = 0; i < count && @shortcircuit@; ++i) {
        value @combineop@ @combinemask@(*data1, *data2);

        data1 += stride1;
        data2 += stride2;
    }

    *(npy_bool *)data0 = value;
}

static void
@oper@_masked_inner_0stride_gen_0stride(char **dataptr,
                                npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1], *data2 = dataptr[2];
    npy_intp stride1 = strides[1];
    npy_intp i;
    char maskvalue = *data2;

    if (maskvalue) {
        char value = *data0;

        for (i = 0; i < count && @shortcircuit@; ++i) {
            value @combineop@ *data1;

            data1 += stride1;
        }

        *(npy_bool *)data0 = value;
    }
}

static int
reduce_@oper@_masked_loop(NpyIter *iter,
                char **dataptr,
                npy_intp *strides,
                npy_intp *countptr,
                NpyIter_IterNextFunc *iternext,
                int needs_api,
                npy_intp skip_first_count,
                void *data)
{
    npy_intp fixed_strides[3];
    reduce_inner_loop *inner_loop;
    NPY_BEGIN_THREADS_DEF;

    NpyIter_GetInnerFixedStrideArray(iter, fixed_strides);

    if (!needs_api) {
        NPY_BEGIN_THREADS;
    }

    /* Choose a loop specialized based on the strides */
    if (fixed_strides[0] == 0) {
        if (fixed_strides[2] == 0) {
            inner_loop = &@oper@_masked_inner_0stride_gen_0stride;
        }
        else {
            inner_loop = &@oper@_masked_inner_0stride_gen_gen;
        }
    }
    else {
        inner_loop = &@oper@_masked_inner_gen_gen_gen;
    }

    /*
     * 'skip_first_count' will always be 0 because we are doing a reduction
     * with an identity.
     */

    do {
        inner_loop(dataptr, strides, *countptr);
    } while (iternext(iter));

    if (!needs_api) {
        NPY_END_THREADS;
    }

    return (needs_api && PyErr_Occurred()) ? -1 : 0;
}

static void
@oper@_adv_masked_inner_gen_gen_gen_gen(char **dataptr,
                                npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1];
    char *data2 = dataptr[2], *data3 = dataptr[3];
    npy_intp stride0 = strides[0], stride1 = strides[1];
    npy_intp stride2 = strides[2], stride3 = strides[3];
    npy_intp i;

    for (i = 0; i < count; ++i) {
        /* Normal case */
        if (*data2) {
            *data0 @combineop@ *data1;
        }
        /*
         * If the value is an exposed True (for any) or False (for all),
         * expose the result as well
         */
        else if (@combinemask@(*data1, *data3) == 1-@idval@) {
            *data0 = 1-@idval@;
            *data2 = 1;
        }

        data0 += stride0;
        data1 += stride1;
        data2 += stride2;
        data3 += stride3;
    }
}

static void
@oper@_adv_masked_inner_0stride_gen_0stride_gen(char **dataptr,
                                npy_intp *strides, npy_intp count)
{
    char *data0 = dataptr[0], *data1 = dataptr[1];
    char *data2 = dataptr[2], *data3 = dataptr[3];
    npy_intp stride1 = strides[1], stride3 = strides[3];
    npy_intp i;
    char maskvalue = *data2;
    char value = maskvalue ? *data0 : @idval@;

    for (i = 0; i < count && @shortcircuit@; ++i) {
        /* Normal case */
        if (maskvalue) {
            value @combineop@ *data1;
        }
        /*
         * If the value is an exposed True (for any) or False (for all),
         * expose the result as well
         */
        else if (@combinemask@(*data1, *data3) == 1-@idval@) {
            value = 1-@idval@;
            maskvalue = 1;
            break;
        }

        data1 += stride1;
        data3 += stride3;
    }

    if (maskvalue) {
        *data0 = value;
        *data2 = maskvalue;
    }
}

static int
reduce_@oper@_advanced_masked_loop(NpyIter *iter,
                char **dataptr,
                npy_intp *strides,
                npy_intp *countptr,
                NpyIter_IterNextFunc *iternext,
                int needs_api,
                npy_intp skip_first_count,
                void *data)
{
    npy_intp fixed_strides[4];
    reduce_inner_loop *inner_loop;
    NPY_BEGIN_THREADS_DEF;

    NpyIter_GetInnerFixedStrideArray(iter, fixed_strides);

    if (!needs_api) {
        NPY_BEGIN_THREADS;
    }

    /* Choose a loop specialized based on the strides */
    if (fixed_strides[0] == 0 && fixed_strides[2] == 0) {
        inner_loop = &@oper@_adv_masked_inner_0stride_gen_0stride_gen;
    }
    else {
        inner_loop = &@oper@_adv_masked_inner_gen_gen_gen_gen;
    }

    /*
     * 'skip_first_count' will always be 0 because we are doing a reduction
     * with an identity.
     */

    do {
        inner_loop(dataptr, strides, *countptr);
    } while (iternext(iter));

    if (!needs_api) {
        NPY_END_THREADS;
    }

    return (needs_api && PyErr_Occurred()) ? -1 : 0;
}

NPY_NO_EXPORT PyArrayObject *
PyArray_Reduce@Oper@(PyArrayObject *arr, PyArrayObject *out,
            npy_bool *axis_flags, int skipna, int keepdims)
{
    PyArrayObject *result;
    PyArray_Descr *bool_dtype;

    bool_dtype = PyArray_DescrFromType(NPY_BOOL);
    if (bool_dtype == NULL) {
        return NULL;
    }

    result = PyArray_ReduceWrapper(arr, out, NULL,
                        bool_dtype, bool_dtype,
                        NPY_UNSAFE_CASTING,
                        axis_flags, 1, skipna, NULL, keepdims, 1,
                        &assign_identity_@oper@,
                        &reduce_@oper@_loop,
                        &reduce_@oper@_masked_loop,
                        &reduce_@oper@_advanced_masked_loop,
                        NULL, 0, "@oper@");
    Py_DECREF(bool_dtype);
    return result;
}

/**end repeat**/

#ifdef __cplusplus
}
#endif


